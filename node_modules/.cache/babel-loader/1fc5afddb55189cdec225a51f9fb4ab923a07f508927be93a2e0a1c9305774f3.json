{"ast":null,"code":"var _jsxFileName = \"/Users/ceciliecastor/typescript-tut/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport InputField from \"./component/InputField\";\nimport TodoList from \"./component/TodoList\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\n//FC = functional component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [todo, setTodo] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [completedTodos, setCompletedTodos] = useState([]);\n  const handleAdd = e => {\n    e.preventDefault();\n    if (todo) {\n      setTodos([...todos, {\n        id: Date.now(),\n        todo,\n        isDone: false\n      }]);\n      setTodo(\"\");\n    }\n  };\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"heading\",\n        children: \"TASKIFY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        todo: todo,\n        setTodo: setTodo,\n        handleAdd: handleAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        todos: todos,\n        setTodos: setTodos,\n        completedTodos: completedTodos,\n        setCompletedTodos: setCompletedTodos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KxnW1/i3wJEo8IlkhKQPang6jxQ=\");\n_c = App;\nexport default App;\n\n// -------------------------------\n\n//This variable contains an array of strings\n//let hobbies: string[];\n\n//this variable is called a tuple\n//let role: [number, string];\n\n/* ----- OBJECT / TYPE ---- */\n//define an object\n//first letters of type is capital (good practice)\n//? after var name makes it optional\n\n//Type:\n// type Person = {\n//   name: string;\n//   age?: number;\n// };\n\n//'cat' contains both Person and Cat's data\n//when declaring Cat you'll have to declare BOTH Person and Cat or you'll get an error\n// type Cat = Person & {\n//   catName: string;\n//   catAge?: number;\n// };\n\n//Interface:\n// interface OtherPerson {\n//   otherName: string;\n//   otherAge?: number;\n// }\n\n// interface OtherCat extends OtherPerson {\n//   otherCatName: string;\n//   otherCatAge: number;\n// }\n\n//A variable that contains an array of Person object\n//let lotsOfPeople: Person[];\n\n//A var that contains both number and string using union (this symbol: |)\n//you can now use either/or - not both\n//let ageUnion: number | string;\n\n/* ----- FUNCTION ---- */\n// function printName(name: string){\n//   console.log(name)\n// }\n\n//void returns undefined\n//let printAddress: (name: string) => void;\n\n//Never doesn't return anything\n//let printAddressNever: (name: string) => never;\n\n//let personName: unknown;\n//--------------------------------\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputField","TodoList","DragDropContext","App","todo","setTodo","todos","setTodos","completedTodos","setCompletedTodos","handleAdd","e","preventDefault","id","Date","now","isDone","onDragEnd","result","source","destination"],"sources":["/Users/ceciliecastor/typescript-tut/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport InputField from \"./component/InputField\";\nimport TodoList from \"./component/TodoList\";\nimport { Todo } from \"./model\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\n\n//FC = functional component\nconst App: React.FC = () => {\n  const [todo, setTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [completedTodos, setCompletedTodos] = useState<Todo[]>([]);\n\n  const handleAdd = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (todo) {\n      setTodos([...todos, { id: Date.now(), todo, isDone: false }]);\n      setTodo(\"\");\n    }\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"App\">\n        <span className=\"heading\">TASKIFY</span>\n        <InputField todo={todo} setTodo={setTodo} handleAdd={handleAdd} />\n        <TodoList\n          todos={todos}\n          setTodos={setTodos}\n          completedTodos={completedTodos}\n          setCompletedTodos={setCompletedTodos}\n        />\n      </div>\n    </DragDropContext>\n  );\n};\n\nexport default App;\n\n// -------------------------------\n\n//This variable contains an array of strings\n//let hobbies: string[];\n\n//this variable is called a tuple\n//let role: [number, string];\n\n/* ----- OBJECT / TYPE ---- */\n//define an object\n//first letters of type is capital (good practice)\n//? after var name makes it optional\n\n//Type:\n// type Person = {\n//   name: string;\n//   age?: number;\n// };\n\n//'cat' contains both Person and Cat's data\n//when declaring Cat you'll have to declare BOTH Person and Cat or you'll get an error\n// type Cat = Person & {\n//   catName: string;\n//   catAge?: number;\n// };\n\n//Interface:\n// interface OtherPerson {\n//   otherName: string;\n//   otherAge?: number;\n// }\n\n// interface OtherCat extends OtherPerson {\n//   otherCatName: string;\n//   otherCatAge: number;\n// }\n\n//A variable that contains an array of Person object\n//let lotsOfPeople: Person[];\n\n//A var that contains both number and string using union (this symbol: |)\n//you can now use either/or - not both\n//let ageUnion: number | string;\n\n/* ----- FUNCTION ---- */\n// function printName(name: string){\n//   console.log(name)\n// }\n\n//void returns undefined\n//let printAddress: (name: string) => void;\n\n//Never doesn't return anything\n//let printAddressNever: (name: string) => never;\n\n//let personName: unknown;\n//--------------------------------\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,QAAQ,MAAM,sBAAsB;AAE3C,SAASC,eAAe,QAAoB,qBAAqB;;AAEjE;AAAA;AACA,MAAMC,GAAa,GAAG,MAAM;EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAS,EAAE,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAEhE,MAAMW,SAAS,GAAIC,CAAkB,IAAK;IACxCA,CAAC,CAACC,cAAc,EAAE;IAElB,IAAIR,IAAI,EAAE;MACRG,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;QAAEO,EAAE,EAAEC,IAAI,CAACC,GAAG,EAAE;QAAEX,IAAI;QAAEY,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC;MAC7DX,OAAO,CAAC,EAAE,CAAC;IACb;EACF,CAAC;EAED,MAAMY,SAAS,GAAIC,MAAkB,IAAK;IACxC,MAAM;MAAEC,MAAM;MAAEC;IAAY,CAAC,GAAGF,MAAM;EACxC,CAAC;EAED,oBACE,QAAC,eAAe;IAAC,SAAS,EAAED,SAAU;IAAA,uBACpC;MAAK,SAAS,EAAC,KAAK;MAAA,wBAClB;QAAM,SAAS,EAAC,SAAS;QAAA,UAAC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAO,eACxC,QAAC,UAAU;QAAC,IAAI,EAAEb,IAAK;QAAC,OAAO,EAAEC,OAAQ;QAAC,SAAS,EAAEK;MAAU;QAAA;QAAA;QAAA;MAAA,QAAG,eAClE,QAAC,QAAQ;QACP,KAAK,EAAEJ,KAAM;QACb,QAAQ,EAAEC,QAAS;QACnB,cAAc,EAAEC,cAAe;QAC/B,iBAAiB,EAAEC;MAAkB;QAAA;QAAA;QAAA;MAAA,QACrC;IAAA;MAAA;MAAA;MAAA;IAAA;EACE;IAAA;IAAA;IAAA;EAAA,QACU;AAEtB,CAAC;AAAC,GAhCIN,GAAa;AAAA,KAAbA,GAAa;AAkCnB,eAAeA,GAAG;;AAElB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}