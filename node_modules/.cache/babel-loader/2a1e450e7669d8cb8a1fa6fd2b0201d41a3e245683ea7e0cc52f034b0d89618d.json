{"ast":null,"code":"var _jsxFileName = \"/Users/ceciliecastor/typescript-tut/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\n\n// \n\n//This variable contains an array of strings\n//let hobbies: string[]; \n\n//this variable is called a tuple\n//let role: [number, string]; \n\n/* ----- OBJECT / TYPE ---- */\n//define an object\n//first letters of type is capital (good practice)\n//? after var name makes it optional\n\n//Type: \n// type Person = {\n//   name: string; \n//   age?: number; \n// };\n\n//'cat' contains both Person and Cat's data\n//when declaring Cat you'll have to declare BOTH Person and Cat or you'll get an error \n// type Cat = Person & {\n//   catName: string; \n//   catAge?: number; \n// }; \n\n//Interface: \n// interface OtherPerson {\n//   otherName: string; \n//   otherAge?: number; \n// }\n\n// interface OtherCat extends OtherPerson {\n//   otherCatName: string; \n//   otherCatAge: number; \n// }\n\n//A variable that contains an array of Person object\n//let lotsOfPeople: Person[]; \n\n//A var that contains both number and string using union (this symbol: |)\n//you can now use either/or - not both\n//let ageUnion: number | string; \n\n/* ----- FUNCTION ---- */\n// function printName(name: string){\n//   console.log(name)\n// }\n\n//void returns undefined\n//let printAddress: (name: string) => void; \n\n//Never doesn't return anything \n//let printAddressNever: (name: string) => never; \n\n//let personName: unknown; \n//---------------------------------------------------------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Hello world!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","App"],"sources":["/Users/ceciliecastor/typescript-tut/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport './App.css';\n\n// \n\n//This variable contains an array of strings\n//let hobbies: string[]; \n\n//this variable is called a tuple\n//let role: [number, string]; \n\n/* ----- OBJECT / TYPE ---- */\n//define an object\n//first letters of type is capital (good practice)\n//? after var name makes it optional\n\n//Type: \n// type Person = {\n//   name: string; \n//   age?: number; \n// };\n\n//'cat' contains both Person and Cat's data\n//when declaring Cat you'll have to declare BOTH Person and Cat or you'll get an error \n// type Cat = Person & {\n//   catName: string; \n//   catAge?: number; \n// }; \n\n//Interface: \n// interface OtherPerson {\n//   otherName: string; \n//   otherAge?: number; \n// }\n\n// interface OtherCat extends OtherPerson {\n//   otherCatName: string; \n//   otherCatAge: number; \n// }\n\n//A variable that contains an array of Person object\n//let lotsOfPeople: Person[]; \n\n//A var that contains both number and string using union (this symbol: |)\n//you can now use either/or - not both\n//let ageUnion: number | string; \n\n/* ----- FUNCTION ---- */\n// function printName(name: string){\n//   console.log(name)\n// }\n\n//void returns undefined\n//let printAddress: (name: string) => void; \n\n//Never doesn't return anything \n//let printAddressNever: (name: string) => never; \n\n//let personName: unknown; \n//---------------------------------------------------------------\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      Hello world!\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;;AAElB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAGA,MAAMC,GAAa,GAAG,MAAM;EAC1B,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,UAAC;EAErB;IAAA;IAAA;IAAA;EAAA,QAAM;AAEV,CAAC;AAAA,KANKA,GAAa;AAQnB,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}