{"ast":null,"code":"var _jsxFileName = \"/Users/ceciliecastor/typescript-tut/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport InputField from './component/InputField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//FC = functional component\nconst App = () => {\n  _s();\n  const [todo, setTodo] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const handleAdd = e => {\n    e.preventDefault();\n  };\n  console.log(todo);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"heading\",\n      children: \"TASKIFY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputField, {\n      todo: todo,\n      setTodo: setTodo,\n      handleAdd: handleAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"7DKd7CJCdxVY/pQjjQ6xII7vyb4=\");\n_c = App;\nexport default App;\n\n// -------------------------------\n\n//This variable contains an array of strings\n//let hobbies: string[]; \n\n//this variable is called a tuple\n//let role: [number, string]; \n\n/* ----- OBJECT / TYPE ---- */\n//define an object\n//first letters of type is capital (good practice)\n//? after var name makes it optional\n\n//Type: \n// type Person = {\n//   name: string; \n//   age?: number; \n// };\n\n//'cat' contains both Person and Cat's data\n//when declaring Cat you'll have to declare BOTH Person and Cat or you'll get an error \n// type Cat = Person & {\n//   catName: string; \n//   catAge?: number; \n// }; \n\n//Interface: \n// interface OtherPerson {\n//   otherName: string; \n//   otherAge?: number; \n// }\n\n// interface OtherCat extends OtherPerson {\n//   otherCatName: string; \n//   otherCatAge: number; \n// }\n\n//A variable that contains an array of Person object\n//let lotsOfPeople: Person[]; \n\n//A var that contains both number and string using union (this symbol: |)\n//you can now use either/or - not both\n//let ageUnion: number | string; \n\n/* ----- FUNCTION ---- */\n// function printName(name: string){\n//   console.log(name)\n// }\n\n//void returns undefined\n//let printAddress: (name: string) => void; \n\n//Never doesn't return anything \n//let printAddressNever: (name: string) => never; \n\n//let personName: unknown; \n//--------------------------------\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputField","App","todo","setTodo","todos","setTodos","handleAdd","e","preventDefault","console","log"],"sources":["/Users/ceciliecastor/typescript-tut/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport InputField from './component/InputField';\nimport { Todo } from './model';\n\n\n//FC = functional component\nconst App: React.FC = () => {\n\n  const[todo, setTodo] = useState<string>(\"\"); \n  const[todos, setTodos] = useState<Todo[]>([])\n\n  const handleAdd = (e) => {\n    e.preventDefault(); \n  }\n  console.log(todo)\n\n  return (\n    <div className=\"App\">\n      <span className='heading'>TASKIFY</span>\n      <InputField todo={todo} setTodo={setTodo} handleAdd={handleAdd}/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// -------------------------------\n\n//This variable contains an array of strings\n//let hobbies: string[]; \n\n//this variable is called a tuple\n//let role: [number, string]; \n\n/* ----- OBJECT / TYPE ---- */\n//define an object\n//first letters of type is capital (good practice)\n//? after var name makes it optional\n\n//Type: \n// type Person = {\n//   name: string; \n//   age?: number; \n// };\n\n//'cat' contains both Person and Cat's data\n//when declaring Cat you'll have to declare BOTH Person and Cat or you'll get an error \n// type Cat = Person & {\n//   catName: string; \n//   catAge?: number; \n// }; \n\n//Interface: \n// interface OtherPerson {\n//   otherName: string; \n//   otherAge?: number; \n// }\n\n// interface OtherCat extends OtherPerson {\n//   otherCatName: string; \n//   otherCatAge: number; \n// }\n\n//A variable that contains an array of Person object\n//let lotsOfPeople: Person[]; \n\n//A var that contains both number and string using union (this symbol: |)\n//you can now use either/or - not both\n//let ageUnion: number | string; \n\n/* ----- FUNCTION ---- */\n// function printName(name: string){\n//   console.log(name)\n// }\n\n//void returns undefined\n//let printAddress: (name: string) => void; \n\n//Never doesn't return anything \n//let printAddressNever: (name: string) => never; \n\n//let personName: unknown; \n//--------------------------------"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,wBAAwB;AAAC;AAIhD;AACA,MAAMC,GAAa,GAAG,MAAM;EAAA;EAE1B,MAAK,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAS,EAAE,CAAC;EAC3C,MAAK,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAS,EAAE,CAAC;EAE7C,MAAMO,SAAS,GAAIC,CAAC,IAAK;IACvBA,CAAC,CAACC,cAAc,EAAE;EACpB,CAAC;EACDC,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC;EAEjB,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAM,SAAS,EAAC,SAAS;MAAA,UAAC;IAAO;MAAA;MAAA;MAAA;IAAA,QAAO,eACxC,QAAC,UAAU;MAAC,IAAI,EAAEA,IAAK;MAAC,OAAO,EAAEC,OAAQ;MAAC,SAAS,EAAEG;IAAU;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7D;AAEV,CAAC;AAAA,GAhBKL,GAAa;AAAA,KAAbA,GAAa;AAkBnB,eAAeA,GAAG;;AAGlB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}