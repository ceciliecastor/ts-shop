{"ast":null,"code":"var _jsxFileName = \"/Users/ceciliecastor/typescript-tut/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet name;\nlet age;\nlet student;\n\n//This variable contains an array of strings\nlet hobbies;\n\n//this variable is called a tuple\nlet role;\n\n/* ----- OBJECT / TYPE ---- */\n//define an object\n//first letters of type is capital (good practice)\n//? after var name makes it optional\n\n//Type: \n\n//A variable that contains an array of Person object\nlet lotsOfPeople;\n\n//A var that contains both number and string using union (this symbol: |)\n//you can now use either/or - not both\nlet ageUnion;\n\n/* ----- FUNCTION ---- */\nfunction printName(name) {\n  console.log(name);\n}\nprintName('Cecilie');\n\n//void returns undefined\nlet printAddress;\n\n//Never doesn't return anything \nlet printAddressNever;\nlet personName;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Hello world!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","name","age","student","hobbies","role","lotsOfPeople","ageUnion","printName","console","log","printAddress","printAddressNever","personName","App"],"sources":["/Users/ceciliecastor/typescript-tut/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet name: string; \nlet age: number;  \nlet student: boolean; \n\n//This variable contains an array of strings\nlet hobbies: string[]; \n\n//this variable is called a tuple\nlet role: [number, string]; \n\n/* ----- OBJECT / TYPE ---- */\n//define an object\n//first letters of type is capital (good practice)\n//? after var name makes it optional\n\n//Type: \ntype Person = {\n  name: string; \n  age?: number; \n};\n\n//'cat' contains both Person and Cat's data\n//when declaring Cat you'll have to declare BOTH Person and Cat or you'll get an error \ntype Cat = Person & {\n  catName: string; \n  catAge?: number; \n}; \n\n//Interface: \ninterface OtherPerson {\n  otherName: string; \n  otherAge?: number; \n}\n\ninterface OtherCat {\n  otherCatName: string; \n  otherCatAge: number; \n}\n\n//A variable that contains an array of Person object\nlet lotsOfPeople: Person[]; \n\n//A var that contains both number and string using union (this symbol: |)\n//you can now use either/or - not both\nlet ageUnion: number | string; \n\n/* ----- FUNCTION ---- */\nfunction printName(name: string){\n  console.log(name)\n}\n\nprintName('Cecilie')\n\n//void returns undefined\nlet printAddress: (name: string) => void; \n\n//Never doesn't return anything \nlet printAddressNever: (name: string) => never; \n\nlet personName: unknown; \n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      Hello world!\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAAC;AAEnB,IAAIC,IAAY;AAChB,IAAIC,GAAW;AACf,IAAIC,OAAgB;;AAEpB;AACA,IAAIC,OAAiB;;AAErB;AACA,IAAIC,IAAsB;;AAE1B;AACA;AACA;AACA;;AAEA;;AAwBA;AACA,IAAIC,YAAsB;;AAE1B;AACA;AACA,IAAIC,QAAyB;;AAE7B;AACA,SAASC,SAAS,CAACP,IAAY,EAAC;EAC9BQ,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC;AACnB;AAEAO,SAAS,CAAC,SAAS,CAAC;;AAEpB;AACA,IAAIG,YAAoC;;AAExC;AACA,IAAIC,iBAA0C;AAE9C,IAAIC,UAAmB;AAIvB,SAASC,GAAG,GAAG;EACb,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,UAAC;EAErB;IAAA;IAAA;IAAA;EAAA,QAAM;AAEV;AAAC,KANQA,GAAG;AAQZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}