[{"/Users/ceciliecastor/Desktop/fantastic-food/tutorials-for-project/typescript-tut/src/index.tsx":"1","/Users/ceciliecastor/Desktop/fantastic-food/tutorials-for-project/typescript-tut/src/App.tsx":"2"},{"size":273,"mtime":1675064523486,"results":"3","hashOfConfig":"4"},{"size":2669,"mtime":1677053274730,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"im0err",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/Users/ceciliecastor/Desktop/fantastic-food/tutorials-for-project/typescript-tut/src/index.tsx",[],[],"/Users/ceciliecastor/Desktop/fantastic-food/tutorials-for-project/typescript-tut/src/App.tsx",["13"],[],"import React, { useState } from \"react\";\nimport \"./App.css\";\nimport InputField from \"./component/InputField\";\nimport TodoList from \"./component/TodoList\";\nimport { Todo } from \"./model\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\n\n//FC = functional component\nconst App: React.FC = () => {\n  const [todo, setTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [completedTodos, setCompletedTodos] = useState<Todo[]>([]);\n\n  const handleAdd = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (todo) {\n      setTodos([...todos, { id: Date.now(), todo, isDone: false }]);\n      setTodo(\"\");\n    }\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n\n    //If you drag a element outside a droppable space\n    if(!destination)return\n    if(destination.droppableId===source.droppableId)\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"App\">\n        <span className=\"heading\">TASKIFY</span>\n        <InputField todo={todo} setTodo={setTodo} handleAdd={handleAdd} />\n        <TodoList\n          todos={todos}\n          setTodos={setTodos}\n          completedTodos={completedTodos}\n          setCompletedTodos={setCompletedTodos}\n        />\n      </div>\n    </DragDropContext>\n  );\n};\n\nexport default App;\n\n// -------------------------------\n\n//This variable contains an array of strings\n//let hobbies: string[];\n\n//this variable is called a tuple\n//let role: [number, string];\n\n/* ----- OBJECT / TYPE ---- */\n//define an object\n//first letters of type is capital (good practice)\n//? after var name makes it optional\n\n//Type:\n// type Person = {\n//   name: string;\n//   age?: number;\n// };\n\n//'cat' contains both Person and Cat's data\n//when declaring Cat you'll have to declare BOTH Person and Cat or you'll get an error\n// type Cat = Person & {\n//   catName: string;\n//   catAge?: number;\n// };\n\n//Interface:\n// interface OtherPerson {\n//   otherName: string;\n//   otherAge?: number;\n// }\n\n// interface OtherCat extends OtherPerson {\n//   otherCatName: string;\n//   otherCatAge: number;\n// }\n\n//A variable that contains an array of Person object\n//let lotsOfPeople: Person[];\n\n//A var that contains both number and string using union (this symbol: |)\n//you can now use either/or - not both\n//let ageUnion: number | string;\n\n/* ----- FUNCTION ---- */\n// function printName(name: string){\n//   console.log(name)\n// }\n\n//void returns undefined\n//let printAddress: (name: string) => void;\n\n//Never doesn't return anything\n//let printAddressNever: (name: string) => never;\n\n//let personName: unknown;\n//--------------------------------\n",{"ruleId":null,"fatal":true,"severity":2,"message":"14","line":29,"column":2},"Parsing error: Expression expected."]